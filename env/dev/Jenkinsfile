

pipeline {
    
    node('maven') {

       stage 'build'
        openshiftBuild(buildConfig: 'ruby-sample-build', showBuildLogs: 'true')
       stage 'deploy'
       openshiftDeploy(deploymentConfig: 'frontend')
}
}

def deployApp(app, version) {
    openshift.patch("dc/${app}", "'{\"spec\":{\"triggers\":[{\"type\":\"ImageChange\",\"imageChangeParams\":{\"containerNames\":[\"${app}\"],\"from\":{\"kind\":\"ImageStreamTag\",\"name\":\"${app}:${version}\"}}}]}}}'")
    openshift.selector("dc", "${app}").rollout().latest();  
}

def createApp(app, tag) {
    // Creates the application and get the brand new BuildConfig
    def dc = openshift.newApp("${app}:${tag}").narrow("dc");
    // Creates the app Route
    openshift.selector("svc", app).expose();

    // Waits for the deployment to finish
    while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
        sleep 10
    }
    
    // Removes the triggers  
    openshift.set("triggers", "dc/${app}", "--manual");
}
